import React from "react";
import { useState, useEffect, useRef } from "react";
import * as d3 from "d3";
import { Slider } from "antd";
import { geoPath, geoAlbersUsa } from 'd3-geo';
import usMapData from "./states-10m.json";
import GunDeathData from "./StateGunDeaths.csv";
import { feature } from 'topojson-client';

export const GunDeath = () => {
    const svgRef = useRef();
    const [bandwidth, setBandwidth] = useState(10);
    const [thresholds, setThresholds] = useState(10);

    const changeBandwidth = (value) => {
        setBandwidth(value);
    }

    const changeThresholds = (value) => {
        setThresholds(value);
    }

    useEffect(() => {
        const width = 960;
        const height = 500;
        const margin = { top: 20, right: 30, bottom: 30, left: 40 };

        const svg = d3.select(svgRef.current)
            .attr("width", width)
            .attr("height", height);

        svg.selectAll("*").remove();

        const projection = d3.geoAlbersUsa()
            .scale(900)
            .translate([width / 2, height / 2]);

        const pathGenerator = geoPath().projection(projection);

        svg.attr('width', width)
            .attr('height', height)
            .selectAll('.state')
            .data(feature(usMapData, usMapData.objects.states).features)
            .enter()
            .append('path')
            .attr('class', 'state')
            .attr('d', pathGenerator)
            .attr('fill', '#ccc')
            .attr('stroke', '#fff');

        d3.csv(GunDeathData).then(data => {
            const filteredData = data.map(d => ({
                ...d,
                lat: parseFloat(d.lat.trim()),
                lng: parseFloat(d.lng.trim())
            })).filter(d => !isNaN(d.lat) && !isNaN(d.lng));

            const contours = d3.contourDensity()
                .x(d => projection([d.lng, d.lat])[0])
                .y(d => projection([d.lng, d.lat])[1])
                .size([width, height])
                .bandwidth(bandwidth)
                .thresholds(thresholds)
                (filteredData);

            const colorScale = d3.scaleSequential(d3.interpolateBlues)
                .domain([0, d3.max(contours, d => d.value)]);

            svg.append("g")
                .selectAll("circle")
                .data(filteredData)
                .enter().append("circle")
                .attr("cx", d => {
                    const coords = projection([d.lng, d.lat]);
                    return coords ? coords[0] : null;
                })
                .attr("cy", d => {
                    const coords = projection([d.lng, d.lat]);
                    return coords ? coords[1] : null;
                })
                .attr("r", 1)
                .style("fill", "red")
                .attr("display", d => {
                    const coords = projection([d.lng, d.lat]);
                    return coords ? "inline" : "none";
                });

            svg.append("g")
                .attr("fill", "none")
                .attr("stroke", "steelblue")
                .attr("stroke-linejoin", "round")
                .selectAll()
                .data(contours)
                .join("path")
                .attr("opacity", 0.5)
                .attr("fill", d => colorScale(d.value)) 
                .attr("stroke-width", (d, i) => i % 5 ? 0.25 : 1)
                .attr("d", d3.geoPath());
        });
    }, [bandwidth, thresholds]);

    return (
        <>
            <h3>Gun Deaths in the US</h3>
            <h6 style={{color: '#999'}}>Contour Graph generated by Gun Death density</h6>
            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
                <span style={{marginRight: 10}}>Bandwidth: {bandwidth}</span>
                <Slider
                    style={{width: 500}}
                    defaultValue={10}
                    step={1}
                    min={1}
                    max={20}
                    onChange={changeBandwidth}
                />
            </div>
            <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>
                <span style={{marginRight: 10}}>Thresholds: {thresholds}</span>
                <Slider
                    style={{width: 500}}
                    defaultValue={10}
                    step={1}
                    min={1}
                    max={40}
                    onChange={changeThresholds}
                />
            </div>
            <svg ref={svgRef}></svg>
        </>
    );
};